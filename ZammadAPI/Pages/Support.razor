@using ZammadAPI.Data.Dtos.Zammad
@using ZammadAPI.Infrastructure.Abstraction.Implementation
@using ZammadAPI.Infrastructure.Extensions
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc
@using System.IdentityModel.Tokens.Jwt
@using System.Text
@using System.Security.Cryptography
@using ZammadAPI.Data.ZammadModels
@inject ZammadUserService zammadUserService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

@page "/support"

@if(UserInfo is null)
{
    <p>Something wrong</p>    
}
else
{
<div>
    <div class="jumbotron">
        <p class="lead">
            <div>
                <div class="alert alert-primary" role="alert">
                    <div class="alert alert-primary" role="alert"> 
                        <p><strong>Ваш объект размещения: </strong> @UserInfo.Organization</p>
                        <p><strong>Имя: </strong> @UserInfo.FirstName</p>
                        <p><strong>Фамилия: </strong> @UserInfo.LastName</p>
                        <p><strong>Отчество: </strong> @UserInfo.MiddleName</p>

                        <p><strong>Логин: </strong> @UserInfo.Email</p>
                        <p><strong>Пароль: </strong> @UserInfo.Password</p>

                        <p>Перейдите на <a href="@ZammadServerAddress" class="alert-link">портал поддержки</a> и
                        авторизуйтесь с указанными выше логином и паролем.</p>
                    </div>
                     <div class="alert alert-danger" role="alert">
                        <p><strong>Обязательно</strong> скопируйте или запишите пароль!</p>
                    </div>

                    <div class="alert alert-primary" role="alert"> 
                        <p><strong>Телефон техподдержки: </strong><a class="btn btn-primary" href="tel:@PhoneNumberOfSupportService">@PhoneNumberOfSupportService</a></p>
                    </div>
                </div>
            </div>
        </p>
    </div>
</div>
}
@code {
    [Inject]
    private CustomHttpContext? CustomHttpContext { get; set; }
    [Inject]
    private SecurePasswordHasher? SecurePasswordHasher { get; set; }
    [Parameter]
    public UserCreateDto? UserInfo { get; set; }
    public string? ZammadServerAddress;
    public string? PhoneNumberOfSupportService;

    protected override async Task OnInitializedAsync()
    {
        if (CustomHttpContext is null)
            throw new ArgumentNullException(nameof(CustomHttpContext));

        UserInfo = await CreateUserAsync(new JwtSecurityToken(CustomHttpContext.AuthorizationToken));
        ZammadServerAddress = Configuration.GetValue<string>("ZammadServerAddress");
        PhoneNumberOfSupportService = Configuration.GetValue<string>("PhoneNumberOfSupportService");
    } 

    [NonAction]
    public async Task<UserCreateDto> CreateUserAsync(JwtSecurityToken jwtToken)
    {
        if (jwtToken is null)
            throw new ArgumentNullException(nameof(jwtToken));

        UserCreateDto userDto = new();

        userDto.PopulateObjectFromJwtToken(jwtToken);

        if (userDto.FirstName is null)
            throw new ArgumentNullException(nameof(userDto.FirstName));
        if (userDto.LastName is null)
            throw new ArgumentNullException(nameof(userDto.LastName));
        if (userDto.MiddleName is null)
            throw new ArgumentNullException(nameof(userDto.MiddleName));
        if (userDto.Organization is null)
            throw new ArgumentNullException(nameof(userDto.Organization));
        if (userDto.Email is null)
            throw new ArgumentNullException(nameof(userDto.Email));

        // checking if there is a user with this login (login = email) on the zammad 
        // if the user exists then he is redirected to the support portal
        // else a user is created with the received data

        User user = await zammadUserService.SearchByLogin(userDto.Email, Configuration.GetValue<string>("ApiKeyZammadServer"));

        if (user is not null)
            NavigationManager.NavigateTo($"{Configuration.GetValue<string>("ZammadServerAddress")}");

        userDto.Password = SecurePasswordHasher.Hash(userDto.FirstName, userDto.LastName, userDto.MiddleName, userDto.Organization, userDto.Email);

        await zammadUserService.Create(userDto, Configuration.GetValue<string>("ApiKeyZammadServer"));
        return await Task.FromResult(userDto);
    }
}
