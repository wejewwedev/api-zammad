@using ZammadAPI.Data.Dtos.Zammad
@using ZammadAPI.Infrastructure.Abstraction.Implementation
@using ZammadAPI.Infrastructure.Extensions
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc
@using System.IdentityModel.Tokens.Jwt
@using System.Text
@using System.Security.Cryptography
@using ZammadAPI.Data.ZammadModels
@inject ZammadUserService zammadUserService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

@page "/support"

<h1>Support</h1>

@if(UserInfo is null)
{
    <p>Something wrong</p>    
}
else
{
   
<div>
    <p>Объект размещения: @UserInfo.Organization</p>
    <p>Имя: @UserInfo.FirstName</p>
    <p>Фамилия: @UserInfo.LastName</p>
    <p>Отчество: @UserInfo.MiddleName</p>
    <p>Почта: @UserInfo.Email</p>
    <p>Пароль: @UserInfo.Password</p>

    <p>Перейдите на портал поддержки и введите вашу почту и пароль в соответствующие поля</p>
    <p>Затем нажмите кнопку Sign in</p>

    <p><a href="https://www.google.com/">Ссылка на портал поддержки</a></p>
</div>

}
@code {
        [Inject]
        private CustomHttpContext CustomHttpContext { get; set; }
        [Inject]
        private SecurePasswordHasher SecurePasswordHasher { get; set; }
        [Parameter]
        public UserCreateDto UserInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserInfo = await CreateUserAsync(new JwtSecurityToken(CustomHttpContext.AuthorizationToken));
    } 

    [NonAction]
    public async Task<UserCreateDto> CreateUserAsync(JwtSecurityToken token)
    {
        if (token is null)
            throw new ArgumentNullException(nameof(token));

        UserCreateDto userDto = new();

        userDto.PopulateObjectFromJwtToken(token);

        // checking if there is a user with this login (login = email) on the zammad 
        // if the user exists then he is redirected to the support portal
        // else a user is created with the received data

        User user = await zammadUserService.SearchByLogin(userDto.Email, Configuration.GetValue<string>("ApiKeyZammadServer"));

        if (user is not null)
        {
            NavigationManager.NavigateTo($"{Configuration.GetValue<string>("ZammadServerAddress")}");
        }

        userDto.Password = SecurePasswordHasher.Hash(userDto.FirstName, userDto.LastName, userDto.MiddleName, userDto.Organization, userDto.Email);

        await zammadUserService.Create(userDto, Configuration.GetValue<string>("ApiKeyZammadServer"));
        return await Task.FromResult(userDto);
    }
}
